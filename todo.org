#+TITLE: ebook_chunker/todo

* =uniborg/epub_util= was copied to [[file:ebook_chunker/epub_chunker.py]].
We need to later on reuse this library in borg, and DRY.

Also [[file:epub_sum_lib/]] was copied.

* DONE add support for input files other than EPUB
#+BEGIN_SRC markdown
ebook-chunker: add support for input files other than EPUB; first of all, allow supplying multiple files instead of a single epub file. Add `--file-boundary=(none|soft|hard)` for chunking purposes. None just concats with no added boundary, soft adds soft section breaks (like we do for epub sections), and hard always ends a chunk at file boundary (even when lower than the min chunk size). For supporting the different file formats, I think the easiest is to standardize the current epub code on html inputs, and convert other formats to html using pandoc first? What do you think?
#+END_SRC

* DRY the various dup code in different conditional branches

* when extracting the extension of files, the last =\.[^.]+$= should be the extension. Is the current behavior this? It seems to malperform for names such as =sth_v1.3.1.md=.

* DONE add interactive mode to ebook-feeder
#+BEGIN_SRC markdown
add an interactive mode to ebook-feeder, where for each chunk, we copy the current  prompt to the clipboard (at the start of this chunk's turn and when the user  presses 'y'), and read the llm's answer from the clipboard when the user presses  enter. (check if the answer is the same as the prompt to avoid a common user  error). do you understand the requirements clearly?

The interactive mode should also write to a temp dir and be able to resume from  one, just like the normal mode.
#+END_SRC

* DONE add =--gemini-api-key-file= which gets path to text file with api keys separated by new lines. forms a queue; whenever a request fails, move the key to the end, and retry with the next key in queue.
** @retired have a separate sleep param for retrying when we have a new key on hand.

* @retired
:PROPERTIES:
:visibility: folded
:END:
** DONE We can delete most files in =epub_sum_lib=, right?

** NO Write `_fallback_split_html_md` and set this as the default fallback. _fallback_split_html_md should convert to markdown (instead of plain text) and try to first split on `\n\n` and then `\n`.
But won't wrapping md in html and then converting to md again, pose problems?

*** This function should not really be run at all, so why bother making it better?


** DONE _
#+begin_verse
▌1. in feeder, save intermediate responses of the model into `--temp-dir` (default to
▌an os given temp dir) and print this temp dir at the start of the program. no need
▌to delete them (temp dirs get deleted on restart by the os, right?)
▌2. can we make `class ChunkResult(BaseModel):` better? eg, add fields for things the
▌model might want to say, so that we ensure they wont end up in the content field?
▌3. also, do we have any retry mechanism currently? we def should
▌4. ideally, we should be able to resume from a given temp dir also
▌any questions or ideas?
#+end_verse

#+begin_verse
Add a markdown comment with metadata at the start of each new output section that llm returns.

Make using the structured json mode optional by adding `--structured-outputs`. off by default.
#+end_verse

** DONE ebook-feeder seed
#+BEGIN_SRC markdown
add a new module `ebook_feeder/cli.py` which inherits all of the cli options of `ebook_chunker/cli.py` (to DRY), but:
- does away with --format
- gets a `--prompt=some_path.md`. It is sth like:
```
Task: Summarize.

Current Output:
{CURRENT_OUTPUT}

Current Input:
{CURRENT_INPUT}
```
It should replace the magic string `{CURRENT_OUTPUT}` with the accumulated output thus far, and the magic string `{CURRENT_INPUT}` with the next chunk about to be processed. (Use constants for all magic strings.)

It should use structured output with LiteLLM using Gemini 2.5 Flash to get the output for the current input (and avoid getting the accumulated output again). We then manually concate the new output to the accumulated output.

Finally, when all the chunks finish processing, it should write the output to `-o,--out`. `--out`' format is always md.

Any questions?
#+END_SRC

